@app.route('/api/admin/menu', methods=['POST'])
def add_menu_item():
    try:
        new_item_data = request.json
        new_item = MenuItem(
            name=new_item_data['name'],
            description=new_item_data.get('description', ''),
            price=float(new_item_data['price']),
            availability=new_item_data.get('availability', True)  # Assuming default availability is True
        )
        db.session.add(new_item)
        db.session.commit()
        return jsonify({'message': 'Menu item added successfully'}), 201
    except IntegrityError:
        db.session.rollback()
        return jsonify({'error': 'Menu item already exists'}), 400
    except Exception as e:
        db.session.rollback()
        return jsonify({'error': str(e)}), 500

@app.route('/api/admin/menu/<int:item_id>', methods=['PUT'])
def update_menu_item(item_id):
    try:
        item = MenuItem.query.get(item_id)
        if not item:
            return jsonify({'error': 'Menu item not found'}), 404

        data = request.json
        item.name = data.get('name', item.name)
        item.description = data.get('description', item.description)
        item.price = float(data.get('price', item.price))
        item.availability = data.get('availability', item.availability)

        db.session.commit()
        return jsonify({'message': 'Menu item updated successfully'}), 200
    except Exception as e:
        db.session.rollback()
        return jsonify({'error': str(e)}), 500

@app.route('/api/admin/menu/<int:item_id>', methods=['DELETE'])
def delete_menu_item(item_id):
    try:
        item = MenuItem.query.get(item_id)
        if not item:
            return jsonify({'error': 'Menu item not found'}), 404

        db.session.delete(item)
        db.session.commit()
        return jsonify({'message': 'Menu item deleted successfully'}), 200
    except Exception as e:
        db.session.rollback()
        return jsonify({'error': str(e)}), 500

@app.route('/api/place_order', methods=['POST'])
def place_order():
    data = request.get_json()
    app.logger.info(f"Received data: {data}")

    if not data:
        app.logger.error('No data provided')
        return jsonify({'error': 'No data provided'}), 400

    order_items = data.get('items')

    if not order_items:
        app.logger.error('Missing order_items')
        return jsonify({'error': 'Missing order_items'}), 400

    try:
        quantity = sum(item.get('quantity', 0) for item in order_items)
        total_amount = sum(item.get('price', 0) * item.get('quantity', 0) for item in order_items)
    except Exception as e:
        app.logger.error(f"Data processing error: {e}")
        return jsonify({'error': 'Invalid data format'}), 400

    new_order = Order(
        total_amount=total_amount,
        quantity=quantity,
        order_items=str(order_items)  # Convert list to string for storage
    )
    db.session.add(new_order)
    db.session.commit()

    return jsonify({'message': 'Order placed successfully'}), 201

@app.route('/api/admin/orders', methods=['GET'])
def get_orders():
    orders = Order.query.all()
    orders_list = [
        {
            'id': order.id,
            'order_date': order.order_date,
            'total_amount': str(order.total_amount),
            'quantity': order.quantity,
            'order_items': order.order_items
        }
        for order in orders
    ]
    return jsonify(orders_list)

@app.route('/api/feedback', methods=['POST'])
def add_feedback():
    try:
        data = request.get_json()
        username = data.get('username')
        email = data.get('email')
        comment = data.get('comment')
        rating = data.get('rating')

        if not username or not email or not comment or not rating:
            return jsonify({'error': 'Missing required fields'}), 400

        feedback = Feedback(username=username, email=email, comment=comment, rating=rating)
        db.session.add(feedback)
        db.session.commit()

        return jsonify(feedback.to_dict()), 201

    except Exception as e:
        db.session.rollback()
        print(f"Error adding feedback: {e}")
        return jsonify({'error': 'Internal Server Error'}), 500

@app.route('/api/feedback', methods=['GET'])
def get_feedbacks():
    try:
        feedbacks = Feedback.query.order_by(Feedback.created_at.desc()).all()
        return jsonify([feedback.to_dict() for feedback in feedbacks])
    except Exception as e:
        print(f"Error fetching feedbacks: {e}")
        return jsonify({'error': 'Internal Server Error'}), 500

@app.route('/api/admin/feedback', methods=['GET'])
def get_admin_feedbacks():
    feedbacks = Feedback.query.order_by(Feedback.created_at.desc()).all()
    return jsonify([feedback.to_dict() for feedback in feedbacks])

# Route to create a prebooking
@app.route('/api/prebookings', methods=['POST'])
def create_prebooking():
    data = request.json
    new_prebooking = Prebooking(
        username=data['username'],
        email=data['email'],
        phone=data['phone'],
        item_name=data['item_name'],
        quantity=data['quantity'],
        special_requests=data.get('special_requests'),
        date=data['date'],
        time=data['time'],
        comment=data.get('comment')
    )
    db.session.add(new_prebooking)
    db.session.commit()
    return jsonify({'message': 'Prebooking created successfully!'}), 201

# Route to get all prebookings (admin)
@app.route('/api/admin/prebookings', methods=['GET'])
def get_prebookings():
    prebookings = Prebooking.query.all()
    prebooking_list = [
        {
            'id': pb.id,
            'username': pb.username,
            'email': pb.email,
            'phone': pb.phone,
            'item_name': pb.item_name,
            'quantity': pb.quantity,
            'special_requests': pb.special_requests,
            'date': pb.date.strftime('%Y-%m-%d'),
            'time': pb.time.strftime('%H:%M'),
            'comment': pb.comment,
            'created_at': pb.created_at.strftime('%Y-%m-%d %H:%M:%S')
        }
        for pb in prebookings
    ]
    return jsonify(prebooking_list), 200

@app.route('/api/menu_items', methods=['GET'])
def get_menu_items():
    menu_items = MenuItem.query.filter_by(availability=True).all()
    menu_list = [
        {
            'id': item.id,
            'name': item.name,
            'price': float(item.price)
        }
        for item in menu_items
    ]
    return jsonify(menu_list), 200

@app.route('/api/user', methods=['GET'])
def get_user():
    # Example implementation
    username = request.args.get('username')  # Assuming username is passed as a query parameter
    if not username:
        return jsonify({'error': 'Username not provided'}), 400
    
    user = User.query.filter_by(username=username).first()
    if not user:
        return jsonify({'error': 'User not found'}), 404

    return jsonify({
        'username': user.username,
        'role': user.role,
        'email': user.email
    })
    
if __name__ == '__main__':
    with app.app_context():
        db.create_all()
    app.run(debug=True)
